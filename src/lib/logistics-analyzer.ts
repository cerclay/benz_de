import { LogisticsData, SalesData, CarModel, AnalysisResult } from '@/types/logistics';

// Î™®Îç∏Î™Ö Ï†ïÍ∑úÌôî Ìï®Ïàò
const normalizeModelName = (model: string): string => {
  let normalized = String(model).trim().toLowerCase();
  
  // Mercedes-AMG, Mercedes-Maybach Îì±Ïùò Ï†ëÎëêÏÇ¨ Ï†úÍ±∞
  normalized = normalized.replace(/^mercedes-amg\s+/i, '');
  normalized = normalized.replace(/^mercedes-maybach\s+/i, '');
  normalized = normalized.replace(/^mercedes-benz\s+/i, '');
  normalized = normalized.replace(/^mercedes\s+/i, '');
  
  // ÏïÖÏÑºÌä∏ Î¨∏Ïûê Ï†ïÍ∑úÌôî (√© -> e, √≥ -> o Îì±)
  normalized = normalized.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  
  // 4MATICÍ≥º 4M ÌÜµÏùº
  normalized = normalized.replace(/\b4matic\b/gi, '4m');
  
  // Ï∞®Îüâ ÌÉÄÏûÖ Ï†ïÍ∑úÌôî (Coup√©/Coupe, Cabriolet Îì±Ïùò Îã§ÏñëÌïú ÌëúÍ∏∞ ÌÜµÏùº)
  normalized = normalized.replace(/\bcoup[e√©]\b/gi, 'coupe');
  normalized = normalized.replace(/\bcabriolet\b/gi, 'cabriolet');
  normalized = normalized.replace(/\bsedan\b/gi, 'sedan');
  normalized = normalized.replace(/\bwagon\b/gi, 'wagon');
  normalized = normalized.replace(/\bsuv\b/gi, 'suv');
  
  // Í≥µÎ∞± Ï†ïÎ¶¨
  normalized = normalized.replace(/\s+/g, ' ').trim();
  
  return normalized;
};

// Î™®Îç∏ ÌÇ§ ÏÉùÏÑ± Ìï®Ïàò
export const generateModelKey = (
  model: string, 
  color: string, 
  trim: string, 
  year: string | number
): string => {
  const normalizedModel = normalizeModelName(model);
  const normalizedColor = String(color).trim().toLowerCase();
  const normalizedTrim = String(trim).trim().toLowerCase();
  const normalizedYear = String(year).trim();
  
  return `${normalizedModel}_${normalizedColor}_${normalizedTrim}_${normalizedYear}`;
};

// Î¨ºÎ•ò Îç∞Ïù¥ÌÑ∞ Í∑∏Î£πÌôî
export const groupLogisticsData = (logisticsData: LogisticsData[]): Map<string, LogisticsData[]> => {
  const grouped = new Map<string, LogisticsData[]>();
  
  logisticsData.forEach(item => {
    const key = generateModelKey(item.modelDesc, item.colour, item.trim, item.modelYr);
    
    if (!grouped.has(key)) {
      grouped.set(key, []);
    }
    grouped.get(key)!.push(item);
  });
  
  return grouped;
};

// ÌåêÎß§ Îç∞Ïù¥ÌÑ∞ Í∑∏Î£πÌôî
export const groupSalesData = (salesData: SalesData[]): Map<string, SalesData[]> => {
  const grouped = new Map<string, SalesData[]>();
  
  salesData.forEach(item => {
    const key = generateModelKey(item.modelDesc, item.colour, item.trim, item.modelYear);
    
    if (!grouped.has(key)) {
      grouped.set(key, []);
    }
    grouped.get(key)!.push(item);
  });
  
  return grouped;
};

// ÏÉÅÌÉúÎ≥Ñ Î∂ÑÎ•ò Ìï®Ïàò
export const categorizeLogisticsStatus = (status: string): 'in_transit' | 'unknown' => {
  const lowerStatus = status.toLowerCase();
  
  if (lowerStatus.includes('Ïö¥ÏÜ°Ï§ë') || 
      lowerStatus.includes('vpcÏûÖÍ≥†') || 
      lowerStatus.includes('transit')) {
    return 'in_transit';
  }
  
  return 'unknown';
};

// Î∞∞Ï†ï ÏÉÅÌÉú ÌôïÏù∏
export const checkAssignmentStatus = (commNo: string): 'assigned' | 'unassigned' => {
  return commNo && commNo.trim() !== '' ? 'assigned' : 'unassigned';
};

// Îç∞Ïù¥ÌÑ∞ ÌÜµÌï© Î∞è Î∂ÑÏÑù
export const analyzeLogisticsData = (
  logisticsData: LogisticsData[], 
  salesData: SalesData[]
): AnalysisResult => {
  // Îç∞Ïù¥ÌÑ∞ Í∑∏Î£πÌôî
  const logisticsGrouped = groupLogisticsData(logisticsData);
  const salesGrouped = groupSalesData(salesData);
  
  // Î™®Îì† Í≥†Ïú†Ìïú Î™®Îç∏ ÌÇ§ ÏàòÏßë
  const allKeys = new Set([
    ...Array.from(logisticsGrouped.keys()),
    ...Array.from(salesGrouped.keys())
  ]);
  
  const models: CarModel[] = [];
  let totalVehicles = 0;
  let inTransit = 0;
  let pendingAssigned = 0;
  let pendingUnassigned = 0;
  let unmatchedModels = 0;
  
  allKeys.forEach(key => {
    const logistics = logisticsGrouped.get(key) || [];
    const sales = salesGrouped.get(key) || [];
    
    // Í∏∞Î≥∏ Î™®Îç∏ Ï†ïÎ≥¥ (Î¨ºÎ•ò Îç∞Ïù¥ÌÑ∞ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ ÌåêÎß§ Îç∞Ïù¥ÌÑ∞)
    const sampleData = logistics[0] || sales[0];
    if (!sampleData) return;
    
    // G 63 Î™®Îç∏ ÌäπÎ≥Ñ ÎîîÎ≤ÑÍπÖ
    if (sampleData.modelDesc.toLowerCase().includes('g 63')) {
      console.log(`üîç G 63 Î∂ÑÏÑù:`, {
        ÌÇ§: key,
        Î¨ºÎ•ò_Îç∞Ïù¥ÌÑ∞_Ïàò: logistics.length,
        ÌåêÎß§_Îç∞Ïù¥ÌÑ∞_Ïàò: sales.length,
        ÏõêÎ≥∏_Î™®Îç∏Î™Ö: sampleData.modelDesc
      });
    }
    
    // Ïö¥ÏÜ°Ï§ë ÏàòÎüâ Í≥ÑÏÇ∞
    const inTransitCount = logistics.filter(item => 
      categorizeLogisticsStatus(item.logisticsStatus) === 'in_transit'
    ).length;
    
    // Î∞∞Ï†ï ÏÉÅÌÉúÎ≥Ñ ÏàòÎüâ Í≥ÑÏÇ∞
    const assignedSales = sales.filter(item => 
      checkAssignmentStatus(item.commNo) === 'assigned'
    );
    const unassignedSales = sales.filter(item => 
      checkAssignmentStatus(item.commNo) === 'unassigned'
    );
    
    const pendingAssignedCount = assignedSales.length;
    const pendingUnassignedCount = unassignedSales.length;
    
    // Ï¥ù ÏàòÎüâ Í≥ÑÏÇ∞: (Ïö¥ÏÜ°Ï§ë + Î∞∞Ï†ïÏôÑÎ£å) - Î∞∞Ï†ïÎåÄÍ∏∞
    const totalCount = inTransitCount + pendingAssignedCount - pendingUnassignedCount;
    
    // ÏòÅÏóÖÏÇ¨Ïõê Î™©Î°ù ÏàòÏßë (Î∞∞Ï†ïÎåÄÍ∏∞ Ï∞®ÎüâÏùò ÏòÅÏóÖÏÇ¨Ïõê)
    const salesmen = Array.from(new Set(
      unassignedSales
        .map(item => item.salesmen)
        .filter(salesmen => salesmen && salesmen.trim() !== '')
    ));
    
    // Plan.Deliv.Date (PÏó¥ ÎèÑÏ∞©ÏòàÏ†ïÏùº) - Î™®Îì† Î¨ºÎ•ò Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÏàòÏßë
    const allDeliveryDates = logistics
      .map(item => item.deliveryDate)
      .filter(date => date && date.trim() !== '' && date !== 'undefined' && date !== 'null');
    
    // Ïö¥ÏÜ°Ï§ë Ï∞®ÎüâÏùò ÎèÑÏ∞©ÏòàÏ†ïÏùºÎßå Ï∂îÏ∂ú
    const inTransitItems = logistics.filter(item => categorizeLogisticsStatus(item.logisticsStatus) === 'in_transit');
    const inTransitDeliveryDates = inTransitItems
      .map(item => item.deliveryDate)
      .filter(date => date && date.trim() !== '' && date !== 'undefined' && date !== 'null')
      .sort();
    
    // Ïö¥ÏÜ°Ï§ë Ï∞®ÎüâÎì§Ïùò Í≥†Ïú†Ìïú ÎèÑÏ∞©ÏòàÏ†ïÏùºÎì§ (Ï§ëÎ≥µ Ï†úÍ±∞)
    const uniqueInTransitDates = Array.from(new Set(inTransitDeliveryDates)).sort();
    
    // ÌëúÏãúÌï† ÎèÑÏ∞©ÏòàÏ†ïÏùº: Ïö¥ÏÜ°Ï§ë Ï∞®ÎüâÏù¥ ÏûàÏúºÎ©¥ Î™®Îì† Ïö¥ÏÜ°Ï§ë ÎÇ†Ïßú, ÏóÜÏúºÎ©¥ Í∞ÄÏû• Îπ†Î•∏ ÎÇ†Ïßú
    const displayDeliveryDate = uniqueInTransitDates.length > 0 
      ? uniqueInTransitDates.join(', ') // Ïó¨Îü¨ ÎÇ†ÏßúÎ•º ÏâºÌëúÎ°ú Íµ¨Î∂Ñ
      : allDeliveryDates.sort()[0] || '';
    
    // Plan.Deliv.Date ÎîîÎ≤ÑÍπÖ (ÏÉÅÏÑ∏ Î∂ÑÏÑù)
    console.log(`üìÖ ${sampleData.modelDesc} Plan.Deliv.Date ÏÉÅÏÑ∏ Î∂ÑÏÑù:`, {
      Ï†ÑÏ≤¥_Î¨ºÎ•ò_Îç∞Ïù¥ÌÑ∞: logistics.length,
      Î™®Îì†_Î∞∞ÏÜ°Ïùº: allDeliveryDates,
      Ïö¥ÏÜ°Ï§ë_Ï∞®ÎüâÏàò: inTransitItems.length,
      Ïö¥ÏÜ°Ï§ë_Ï∞®Îüâ_Î∞∞ÏÜ°Ïùº: inTransitItems.map(item => ({ ÏÉÅÌÉú: item.logisticsStatus, Î∞∞ÏÜ°Ïùº: item.deliveryDate, ÏõêÎ≥∏: item })),
      Ïö¥ÏÜ°Ï§ë_Ïú†Ìö®Ìïú_Î∞∞ÏÜ°Ïùº: inTransitDeliveryDates,
      ÏµúÏ¢Ö_ÏÑ†ÌÉùÎêú_Î∞∞ÏÜ°Ïùº: displayDeliveryDate,
      Î¨ºÎ•ò_ÏõêÎ≥∏_Îç∞Ïù¥ÌÑ∞_ÏùºÎ∂Ä: logistics.slice(0, 2)
    });
    
    // Î™®Îç∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    const model: CarModel = {
      model: sampleData.modelDesc,
      color: 'colour' in sampleData ? sampleData.colour : (sampleData as SalesData).colour,
      trim: sampleData.trim,
      year: parseInt(String('modelYr' in sampleData ? sampleData.modelYr : (sampleData as SalesData).modelYear)) || 0,
      delivery_date: displayDeliveryDate,
      in_transit: inTransitCount,
      pending_assigned: pendingAssignedCount,
      pending_unassigned: pendingUnassignedCount,
      total_count: totalCount, // ÏùåÏàò ÌóàÏö©
      salesmen
    };
    
    models.push(model);
    
    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    totalVehicles += totalCount;
    inTransit += inTransitCount;
    pendingAssigned += pendingAssignedCount;
    pendingUnassigned += pendingUnassignedCount;
    
    // Îß§ÏπòÎêòÏßÄ ÏïäÏùÄ Î™®Îç∏ ÌôïÏù∏ (Î¨ºÎ•ò Îç∞Ïù¥ÌÑ∞Îäî ÏûàÏßÄÎßå ÌåêÎß§ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞)
    if (logistics.length > 0 && sales.length === 0) {
      unmatchedModels++;
    }
  });
  
  // Î™®Îç∏Î™ÖÏúºÎ°ú Ï†ïÎ†¨
  models.sort((a, b) => a.model.localeCompare(b.model, 'ko'));
  
  const result: AnalysisResult = {
    models,
    summary: {
      totalModels: models.length,
      totalVehicles,
      inTransit,
      pendingAssigned,
      pendingUnassigned,
      unmatchedModels
    }
  };
  
  return result;
};

// ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
export const filterModels = (
  models: CarModel[],
  filters: {
    model?: string;
    color?: string;
    trim?: string;
    status?: 'all' | 'in_transit' | 'pending_assigned' | 'pending_unassigned';
    searchQuery?: string;
  }
): CarModel[] => {
  let filteredModels = [...models];
  
  // Î™®Îç∏Î™Ö ÌïÑÌÑ∞
  if (filters.model) {
    filteredModels = filteredModels.filter(model => 
      model.model.toLowerCase().includes(filters.model!.toLowerCase())
    );
  }
  
  // ÏÉâÏÉÅ ÌïÑÌÑ∞
  if (filters.color) {
    filteredModels = filteredModels.filter(model => 
      model.color.toLowerCase().includes(filters.color!.toLowerCase())
    );
  }
  
  // Ìä∏Î¶º ÌïÑÌÑ∞
  if (filters.trim) {
    filteredModels = filteredModels.filter(model => 
      model.trim.toLowerCase().includes(filters.trim!.toLowerCase())
    );
  }
  
  // ÏÉÅÌÉú ÌïÑÌÑ∞
  if (filters.status && filters.status !== 'all') {
    switch (filters.status) {
      case 'in_transit':
        filteredModels = filteredModels.filter(model => model.in_transit > 0);
        break;
      case 'pending_assigned':
        filteredModels = filteredModels.filter(model => model.pending_assigned > 0);
        break;
      case 'pending_unassigned':
        filteredModels = filteredModels.filter(model => model.pending_unassigned > 0);
        break;
    }
  }
  
  // Í≤ÄÏÉâ ÏøºÎ¶¨ (ÌÜµÌï© Í≤ÄÏÉâ)
  if (filters.searchQuery) {
    const query = filters.searchQuery.toLowerCase();
    filteredModels = filteredModels.filter(model => 
      model.model.toLowerCase().includes(query) ||
      model.color.toLowerCase().includes(query) ||
      model.trim.toLowerCase().includes(query) ||
      model.year.toString().includes(query)
    );
  }
  
  return filteredModels;
};

// Ï†ïÎ†¨ Ìï®Ïàò
export const sortModels = (
  models: CarModel[],
  sortBy: 'model' | 'total_count' | 'delivery_date',
  sortOrder: 'asc' | 'desc' = 'asc'
): CarModel[] => {
  const sorted = [...models].sort((a, b) => {
    let comparison = 0;
    
    switch (sortBy) {
      case 'model':
        comparison = a.model.localeCompare(b.model, 'ko');
        break;
      case 'total_count':
        comparison = a.total_count - b.total_count;
        break;
      case 'delivery_date':
        comparison = a.delivery_date.localeCompare(b.delivery_date);
        break;
    }
    
    return sortOrder === 'desc' ? -comparison : comparison;
  });
  
  return sorted;
};

// ÌÜµÍ≥Ñ Ïû¨Í≥ÑÏÇ∞
export const recalculateSummary = (models: CarModel[]) => {
  return {
    totalModels: models.length,
    totalVehicles: models.reduce((sum, model) => sum + model.total_count, 0),
    inTransit: models.reduce((sum, model) => sum + model.in_transit, 0),
    pendingAssigned: models.reduce((sum, model) => sum + model.pending_assigned, 0),
    pendingUnassigned: models.reduce((sum, model) => sum + model.pending_unassigned, 0),
    unmatchedModels: models.filter(model => model.in_transit > 0 && model.pending_assigned === 0 && model.pending_unassigned === 0).length
  };
}; 